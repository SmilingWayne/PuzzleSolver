import requests 
import re
import time

def get_hitori(problems):
    # problems = [37, 38, 39, 40, 58, 59, 60, 77, 78, 82, 85, 86, 87, 88, 89, 90, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 176, 177, 178, 179, 180, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 316, 317, 318, 319, 320, 347, 348, 349, 350, 357, 358, 359, 360, 420, 430, 440, 559, 560, 567, 568, 577, 578, 587, 588, 599, 600, 609, 610, 618, 619, 620, 639, 640, 647, 648, 649, 650, 659, 660, 669, 670, 679, 680, 689, 690, 698, 699, 700, 709, 710, 719, 720, 729, 730, 739, 740, 749, 750, 759, 760, 769, 770, 779, 780, 789, 790, 799, 800, 809, 810, 819, 820, 829, 830, 839, 840, 849, 850, 859, 860, 869, 870, 879, 880, 889, 890, 899, 900, 909, 910]
    # problems = [179, 180, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 316, 317, 318, 319, 320, 347, 348, 349, 350, 357, 358, 359, 360, 420, 430, 440, 559, 560, 567, 568, 577, 578, 587, 588, 599, 600, 609, 610, 618, 619, 620, 639, 640, 647, 648, 649, 650, 659, 660, 669, 670, 679, 680, 689, 690, 698, 699, 700, 709, 710, 719, 720, 729, 730, 739, 740, 749, 750, 759, 760, 769, 770, 779, 780, 789, 790, 799, 800, 809, 810, 819, 820, 829, 830, 839, 840, 849, 850, 859, 860, 869, 870, 879, 880, 889, 890, 899, 900, 909, 910]
    # problems = [211, 212, 213, 214, 215, 216, 218, 220, 221, 244, 245, 246, 254, 255, 256, 264, 265, 266, 267, 274, 275, 276, 277, 284, 285, 286, 287, 294, 295, 296, 297, 304, 305, 306, 325, 326, 327, 335, 336, 337, 365, 366, 367, 375, 376, 377, 383, 384, 385, 386, 393, 394, 395, 396, 403, 404, 405, 406, 413, 414, 423, 424, 433, 434, 443, 444, 445, 446, 453, 454, 455, 456, 463, 464, 465, 466, 471, 472, 473, 481, 482, 483, 493, 494, 503, 504, 505, 506, 513, 514, 515, 516, 523, 524, 525, 526, 533, 534, 535, 536, 553, 554, 561, 562, 571, 572, 581, 582, 611, 612, 613, 631, 632, 633, 634, 641, 642, 643, 644, 653, 654, 663, 664, 671, 672, 681, 682, 691, 692, 693, 703, 704, 713, 714, 723, 724, 733, 734, 743, 744, 753, 754, 763, 764, 773, 774, 783, 784, 793, 794, 803, 804, 813, 814, 823, 824, 833, 834, 843, 844, 853, 854, 863, 864, 873, 874, 883, 884, 893, 894, 903, 904]
    # ALL DONE
    for p in problems:
        new_p = str(p).zfill(3)
        target_url = f"https://www.janko.at/Raetsel/Hitori/{new_p}.a.htm"

        headers = {
            'User-Agent': "User-Agent: Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/605.1.15 (KHTML, like Gecko) Version/17.5 Safari/605.1.15",
            'Accept': "text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8",
            'Accept-Encoding': "gzip, deflate, br",
            'Accept-Language': "en-US,en;q=0.9",
            'Connection': "keep-alive",
            'Cookie': "index=2; rules=2; genre=2; https__www_janko_at_Raetsel_Slitherlink_0312_a_htm_0=aFxkQXTcYdfwiUew",
            'Host': "www.janko.at",
            'Referer': "https://www.janko.at/Raetsel/index.htm",
            'Sec-Fetch-Dest': "document",
            'Sec-Fetch-Mode': "navigate",
            'Sec-Fetch-Site': "same-origin"
        }

        response = requests.get(target_url, headers=headers)     
        response.encoding = 'utf-8'
        page_source = response.text
        # print(page_source)

        problem_pattern = r"(?<=\[problem\]\n)(.*?)(?=\[solution\])"
        # 正则表达式提取 [solution] 和 [moves] 之间的内容
        solution_pattern = r"(?<=\[solution\]\n)(.*?)(?=\[moves\])"
        solution_pattern2 = r"(?<=\[solution\]\n)(.*?)(?=\[end\])"

        # 使用 re.DOTALL 使 '.' 匹配换行符
        problem_text = re.search(problem_pattern, page_source, re.DOTALL).group().strip()
        try:
            solution_text = re.search(solution_pattern, page_source, re.DOTALL).group().strip()
        except Exception :
            try:
                solution_text = re.search(solution_pattern2, page_source, re.DOTALL).group().strip()
            except Exception:
                solution_text = ""


        rows = problem_text.split("\n")

        # 解析每行的列（通过空格分割每行）
        matrix = [row.split() for row in rows]

        # 行数
        num_rows = len(matrix)

        # 列数 (假设每行列数一致)
        num_cols = len(matrix[0]) if num_rows > 0 else 0
        print(f"SIZE: r = {num_rows}, c = {num_cols}")

        with open(f"../assets/data/hitori/problems/{p}_{num_rows}x{num_cols}.txt", "w") as file:
            # 写入行数和列数到第一行
            file.write(f"{num_rows} {num_cols}\n")
            
            # 写入 problem_text 的每一行
            file.write(problem_text)
        
        with open(f"../assets/data/hitori/solutions/{p}_{num_rows}x{num_cols}.txt", "w") as file:
            # 写入行数和列数到第一行
            file.write(f"{num_rows} {num_cols}\n")
            
            # 写入 problem_text 的每一行
            file.write(solution_text)
        
        print(f"FILE: problems/{p}_{num_rows}x{num_cols}.txt and FILE solutions/{p}_{num_rows}x{num_cols}.txt, done!")
        time.sleep(2)

if __name__ == "__main__":
    # problems = [37, 38, 39, 40, 58, 59, 60, 77, 78, 82, 85, 86, 87, 88, 89, 90, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 176, 177, 178, 179, 180, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 316, 317, 318, 319, 320, 347, 348, 349, 350, 357, 358, 359, 360, 420, 430, 440, 559, 560, 567, 568, 577, 578, 587, 588, 599, 600, 609, 610, 618, 619, 620, 639, 640, 647, 648, 649, 650, 659, 660, 669, 670, 679, 680, 689, 690, 698, 699, 700, 709, 710, 719, 720, 729, 730, 739, 740, 749, 750, 759, 760, 769, 770, 779, 780, 789, 790, 799, 800, 809, 810, 819, 820, 829, 830, 839, 840, 849, 850, 859, 860, 869, 870, 879, 880, 889, 890, 899, 900, 909, 910]
    # # problems = [179, 180, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 316, 317, 318, 319, 320, 347, 348, 349, 350, 357, 358, 359, 360, 420, 430, 440, 559, 560, 567, 568, 577, 578, 587, 588, 599, 600, 609, 610, 618, 619, 620, 639, 640, 647, 648, 649, 650, 659, 660, 669, 670, 679, 680, 689, 690, 698, 699, 700, 709, 710, 719, 720, 729, 730, 739, 740, 749, 750, 759, 760, 769, 770, 779, 780, 789, 790, 799, 800, 809, 810, 819, 820, 829, 830, 839, 840, 849, 850, 859, 860, 869, 870, 879, 880, 889, 890, 899, 900, 909, 910]
    # problems = [211, 212, 213, 214, 215, 216, 218, 220, 221, 244, 245, 246, 254, 255, 256, 264, 265, 266, 267, 274, 275, 276, 277, 284, 285, 286, 287, 294, 295, 296, 297, 304, 305, 306, 325, 326, 327, 335, 336, 337, 365, 366, 367, 375, 376, 377, 383, 384, 385, 386, 393, 394, 395, 396, 403, 404, 405, 406, 413, 414, 423, 424, 433, 434, 443, 444, 445, 446, 453, 454, 455, 456, 463, 464, 465, 466, 471, 472, 473, 481, 482, 483, 493, 494, 503, 504, 505, 506, 513, 514, 515, 516, 523, 524, 525, 526, 533, 534, 535, 536, 553, 554, 561, 562, 571, 572, 581, 582, 611, 612, 613, 631, 632, 633, 634, 641, 642, 643, 644, 653, 654, 663, 664, 671, 672, 681, 682, 691, 692, 693, 703, 704, 713, 714, 723, 724, 733, 734, 743, 744, 753, 754, 763, 764, 773, 774, 783, 784, 793, 794, 803, 804, 813, 814, 823, 824, 833, 834, 843, 844, 853, 854, 863, 864, 873, 874, 883, 884, 893, 894, 903, 904]

    problems = [227, 228, 229, 230, 231, 311, 312, 313, 314, 315, 343, 344, 345, 346, 353, 354, 355, 356, 418, 419, 428, 429, 438, 439, 477, 478, 479, 480, 487, 488, 489, 490, 497, 498, 557, 558, 565, 566, 575, 576, 585, 586, 657, 658, 667, 668, 676, 677, 678, 686, 687, 688, 696, 697, 707, 708, 717, 718, 727, 728, 737, 738, 747, 748, 757, 758, 767, 768, 777, 778, 787, 788, 797, 798, 807, 808, 817, 818, 827, 828, 837, 838, 847, 848, 857, 858, 867, 868, 877, 878, 887, 888, 897, 898, 907, 908]
    get_hitori(problems)